// Code generated by MockGen. DO NOT EDIT.
// Source: slack.go
//
// Generated by this command:
//
//	mockgen -source=slack.go -destination=./mock_slack/mock_slack.go -package=mock_slack
//
// Package mock_slack is a generated GoMock package.
package mock_slack

import (
	reflect "reflect"

	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockSlack is a mock of Slack interface.
type MockSlack struct {
	ctrl     *gomock.Controller
	recorder *MockSlackMockRecorder
}

// MockSlackMockRecorder is the mock recorder for MockSlack.
type MockSlackMockRecorder struct {
	mock *MockSlack
}

// NewMockSlack creates a new mock instance.
func NewMockSlack(ctrl *gomock.Controller) *MockSlack {
	mock := &MockSlack{ctrl: ctrl}
	mock.recorder = &MockSlackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlack) EXPECT() *MockSlackMockRecorder {
	return m.recorder
}

// PostMessage mocks base method.
func (m *MockSlack) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockSlackMockRecorder) PostMessage(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlack)(nil).PostMessage), varargs...)
}
